<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jamie Phillips</title>
  <subtitle>Random musings</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.phillipsj.net/"/>
  <updated>2016-07-26T01:48:45.816Z</updated>
  <id>http://www.phillipsj.net/</id>
  
  <author>
    <name>Jamie Phillips</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Using C# 6 features in Cake</title>
    <link href="http://www.phillipsj.net/2016/07/25/Using-C-6-features-in-Cake/"/>
    <id>http://www.phillipsj.net/2016/07/25/Using-C-6-features-in-Cake/</id>
    <published>2016-07-26T01:47:22.000Z</published>
    <updated>2016-07-26T01:48:45.816Z</updated>
    
    <content type="html">&lt;p&gt;I like a lot of features available in C# 6, but my favorite is string interpolation. I think it makes ecstatically pleasing code. It is much cleaner and more expressive.&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&quot;Dave&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// String.Format example&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; messageWithFormat = &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;.Format(&lt;span class=&quot;string&quot;&gt;&quot;I&#39;m sorry, &amp;#123;0&amp;#125; I&#39;m afraid I can&#39;t do that.&quot;&lt;/span&gt;, name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// String Interpolation&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; messageWithInterpolation = &lt;span class=&quot;string&quot;&gt;$&quot;I&#39;m sorry, &lt;span class=&quot;subst&quot;&gt;&amp;#123;name&amp;#125;&lt;/span&gt; I&#39;m afraid I can&#39;t do that.&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;However, by default you cannot use string interpolation in your Cake file as those bits don’t come with Roslyn just yet. This is an extremely easy fix. All you need to do is pass the experimental flag.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ .\build.ps1 -experimental&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This just gets old and repetitive and I don’t know about you, but I like staying as close to the leading edge as possible, so I just make a small change to my bootstrapper file to always pass the experimental flag. Roughly on like 188 of your bootstrapper file, just replace the &lt;em&gt;$UseExperimental&lt;/em&gt; variable with the &lt;em&gt;-experimental&lt;/em&gt; flag. &lt;/p&gt;
&lt;figure class=&quot;highlight powershell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Previous &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Invoke-Expression&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&amp;amp; `&quot;&lt;span class=&quot;variable&quot;&gt;$CAKE_EXE&lt;/span&gt;`&quot; `&quot;&lt;span class=&quot;variable&quot;&gt;$Script&lt;/span&gt;`&quot; -target=`&quot;&lt;span class=&quot;variable&quot;&gt;$Target&lt;/span&gt;`&quot; -configuration=`&quot;&lt;span class=&quot;variable&quot;&gt;$Configuration&lt;/span&gt;`&quot; -verbosity=`&quot;&lt;span class=&quot;variable&quot;&gt;$Verbosity&lt;/span&gt;`&quot; &lt;span class=&quot;variable&quot;&gt;$UseMono&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$UseDryRun&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$UseExperimental&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$ScriptArgs&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Altered&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Invoke-Expression&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&amp;amp; `&quot;&lt;span class=&quot;variable&quot;&gt;$CAKE_EXE&lt;/span&gt;`&quot; `&quot;&lt;span class=&quot;variable&quot;&gt;$Script&lt;/span&gt;`&quot; -target=`&quot;&lt;span class=&quot;variable&quot;&gt;$Target&lt;/span&gt;`&quot; -configuration=`&quot;&lt;span class=&quot;variable&quot;&gt;$Configuration&lt;/span&gt;`&quot; -verbosity=`&quot;&lt;span class=&quot;variable&quot;&gt;$Verbosity&lt;/span&gt;`&quot; &lt;span class=&quot;variable&quot;&gt;$UseMono&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$UseDryRun&lt;/span&gt; -experimental &lt;span class=&quot;variable&quot;&gt;$ScriptArgs&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now you can make your Cake even more elegant, in my opinion. Here are a few examples of places that string interpolation can be used that I enjoy.&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Before&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Fixie(&lt;span class=&quot;string&quot;&gt;&quot;./src/\**/bin/&quot;&lt;/span&gt; + configuration + &lt;span class=&quot;string&quot;&gt;&quot;/*.Tests.dll&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// After&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Fixie(&lt;span class=&quot;string&quot;&gt;$&quot;./src/\**/bin/&lt;span class=&quot;subst&quot;&gt;&amp;#123;configuration&amp;#125;&lt;/span&gt;/*.Tests.dll&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Before&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DirectoryNotFoundException(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;.Format(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&quot;Deployment target directory not found &amp;#123;0&amp;#125;&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            deploymentPath&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// After&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DirectoryNotFoundException(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;$&quot;Deployment target directory not found &lt;span class=&quot;subst&quot;&gt;&amp;#123;deploymentPath&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Thanks for reading.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;I like a lot of features available in C# 6, but my favorite is string interpolation. I think it makes ecstatically pleasing code. It is m
    
    </summary>
    
    
      <category term="Open Source" scheme="http://www.phillipsj.net/tags/Open-Source/"/>
    
      <category term="Cake" scheme="http://www.phillipsj.net/tags/Cake/"/>
    
  </entry>
  
  <entry>
    <title>Cake: Automating an existing project</title>
    <link href="http://www.phillipsj.net/2016/07/24/Cake-Automating-an-existing-project/"/>
    <id>http://www.phillipsj.net/2016/07/24/Cake-Automating-an-existing-project/</id>
    <published>2016-07-24T19:22:36.000Z</published>
    <updated>2016-07-24T19:24:27.686Z</updated>
    
    <content type="html">&lt;p&gt;Hi, my name is Jamie and I am a &lt;a href=&quot;http://cakebuild.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cake&lt;/a&gt; addin author that doesn’t build my addins using Cake. This seems kind of wrong too me and this is a bonus for you. I am going to walk you through how to use Cake to build your project, run your tests, create a &lt;a href=&quot;https://www.nuget.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NuGet&lt;/a&gt; package, then publish to NuGet. I am going to walk you through performing this for my &lt;a href=&quot;https://github.com/phillipsj/Cake.XdtTransform&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cake.XdtTransform&lt;/a&gt; project. The project is hosted on GitHub so you can see the final build. I am going to be using the wonderful extension created for &lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VsCode&lt;/a&gt; and will be doing most of my work in it, I will discuss the alternatives if you are not using VsCode. If you are going to continue with VsCode, then I would install the Cake Extension that has been created.&lt;/p&gt;
&lt;p&gt;** Steps 1-2 can be skipped if you go grab those files from the &lt;a href=&quot;https://github.com/cake-build/example&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;example&lt;/a&gt; project.&lt;/p&gt;
&lt;h2 id=&quot;Step-1&quot;&gt;&lt;a href=&quot;#Step-1&quot; class=&quot;headerlink&quot; title=&quot;Step 1:&quot;&gt;&lt;/a&gt;Step 1:&lt;/h2&gt;&lt;p&gt;By default all projects that use Cake starts with two files, the bootstrapper script, &lt;em&gt;build.ps1&lt;/em&gt;, if on windows, or &lt;em&gt;build.sh&lt;/em&gt;, on linux. The other file that is needed is the cake file, typically called &lt;em&gt;build.cake&lt;/em&gt;.  In VsCode, open the project that you want to automate with Cake, open the command palette and run the Cake: Install Bootstrapper command, the select the bootstrapper file type that fits your system, in this example I have selected &lt;em&gt;Powershell&lt;/em&gt;.  You should now see the &lt;em&gt;build.ps1&lt;/em&gt; file in your project directory. At this point, there is not much more you are going to need to do with the bootstrapper file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/cake-tutorial/VsCodeCakeBootstrapper.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/cake-tutorial/VsCodeCakeSelectBootstrapperType.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/cake-tutorial/VsCodeCakeSelectBootstrapperInstalled.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Step-2&quot;&gt;&lt;a href=&quot;#Step-2&quot; class=&quot;headerlink&quot; title=&quot;Step 2:&quot;&gt;&lt;/a&gt;Step 2:&lt;/h2&gt;&lt;p&gt;Now you need to create your &lt;em&gt;build.cake&lt;/em&gt; file. Once you have created the file we need to start putting in the basic plumbing that will be required. What is going to be shown below is typically the norm for most cake files, however, it isn’t the only way it can be done. &lt;/p&gt;
&lt;h3 id=&quot;Setting-up-arguments&quot;&gt;&lt;a href=&quot;#Setting-up-arguments&quot; class=&quot;headerlink&quot; title=&quot;Setting up arguments&quot;&gt;&lt;/a&gt;Setting up arguments&lt;/h3&gt;&lt;p&gt;Now you need to grab any arguments you want to pass to your cake file. The first argument we are going to grab that is passed in is the &lt;em&gt;target&lt;/em&gt; argument. This will be the task that you want Cake to execute when it runs. It is set to &lt;em&gt;Default&lt;/em&gt; if nothing is passed in. The second argument is the &lt;em&gt;configuration&lt;/em&gt; that you want to target, it is set to “&lt;em&gt;Release&lt;/em&gt; if nothing is passed. &lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; target = Argument(&lt;span class=&quot;string&quot;&gt;&quot;target&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Default&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; configuration = Argument(&lt;span class=&quot;string&quot;&gt;&quot;configuration&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Release&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;* A special note about arguments. If you open the bootstrapper file you will see that the arguments are parsed out by powershell then passed to your &lt;/em&gt;build.cake* file. If you need to extend the arguments you will need to modify the bootstrapper file.&lt;/p&gt;
&lt;h3 id=&quot;Let’s-run-Cake&quot;&gt;&lt;a href=&quot;#Let’s-run-Cake&quot; class=&quot;headerlink&quot; title=&quot;Let’s run Cake&quot;&gt;&lt;/a&gt;Let’s run Cake&lt;/h3&gt;&lt;p&gt;At this point, lets open a powershell window and run:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ .\build.ps1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;You should see the following output:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Preparing to run build script...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Running build script...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Analyzing build script...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Processing build script...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Downloading and installing Roslyn...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Installing packages (using https://packages.nuget.org/api/v2)...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Copying files...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Copying Roslyn.Compilers.CSharp.dll...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Copying Roslyn.Compilers.dll...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Deleting installation directory...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Compiling build script...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;You will also notice that a tools folder has been added to your project with a Cake folder, nuget.exe, and a packages.config.  This the bootstrapper getting nuget and configuring it, and then install Cake. This is pretty awesome as it doesn’t require anything to be committed to your repository.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/cake-tutorial/BootstrapperGeneratedFoldersAndFiles.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Step-3&quot;&gt;&lt;a href=&quot;#Step-3&quot; class=&quot;headerlink&quot; title=&quot;Step 3:&quot;&gt;&lt;/a&gt;Step 3:&lt;/h2&gt;&lt;p&gt;Now we need to do any preparation. In our example, we need to prepare by setting up our build directory and making our solution file path.&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; buildDir = Directory(&lt;span class=&quot;string&quot;&gt;&quot;./src/Cake.XdtTransform/bin&quot;&lt;/span&gt;) + Directory(configuration);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; solution = &lt;span class=&quot;string&quot;&gt;&quot;./src/Cake.XdtTransform.sln&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This is very basic, but you can imagine if you have a more complex setup like for a really complex build, you may have dozens of items that need prepared.&lt;/p&gt;
&lt;h2 id=&quot;Step-4&quot;&gt;&lt;a href=&quot;#Step-4&quot; class=&quot;headerlink&quot; title=&quot;Step 4:&quot;&gt;&lt;/a&gt;Step 4:&lt;/h2&gt;&lt;p&gt;Now we get to tasks. This is the targets that you will be executing to perform your build. Lots of items will be going on in this step and I will do my best to walk you through all of these.&lt;/p&gt;
&lt;h3 id=&quot;Cleaning-the-Directory&quot;&gt;&lt;a href=&quot;#Cleaning-the-Directory&quot; class=&quot;headerlink&quot; title=&quot;Cleaning the Directory&quot;&gt;&lt;/a&gt;Cleaning the Directory&lt;/h3&gt;&lt;p&gt;Always a good idea to clean any directories that you will be writing too.&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Task(&lt;span class=&quot;string&quot;&gt;&quot;Clean&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .Does(() =&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CleanDirectory(buildDir);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Restoring-NuGet-Packages&quot;&gt;&lt;a href=&quot;#Restoring-NuGet-Packages&quot; class=&quot;headerlink&quot; title=&quot;Restoring NuGet Packages&quot;&gt;&lt;/a&gt;Restoring NuGet Packages&lt;/h3&gt;&lt;p&gt;This task introduces a new concept. If you look at the &lt;em&gt;.IsDependentOn&lt;/em&gt; online, you will notice that we pass it the clean task. What this is doing is telling Cake, hey, before &lt;em&gt;Restore-NuGet-Packages&lt;/em&gt; executes, the &lt;em&gt;Clean&lt;/em&gt; tasks needs to occur first. This is the method that you will use to link your build tasks together to make sure that no matter which task you pass to be executed any dependent tasks are executed first. Finally, we call &lt;em&gt;NuGetRestore&lt;/em&gt; which will fetch our NuGet packages. &lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Task(&lt;span class=&quot;string&quot;&gt;&quot;Restore-NuGet-Packages&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .IsDependentOn(&lt;span class=&quot;string&quot;&gt;&quot;Clean&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .Does(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NuGetRestore(solution);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Buiding-the-solution&quot;&gt;&lt;a href=&quot;#Buiding-the-solution&quot; class=&quot;headerlink&quot; title=&quot;Buiding the solution&quot;&gt;&lt;/a&gt;Buiding the solution&lt;/h3&gt;&lt;p&gt;Now that we have clean directories and restored NuGet packages we are ready to perform our build. We will create our build task with a dependency on &lt;em&gt;Restore-NuGet-Packages&lt;/em&gt; to ensure that our packages are always restored before executing a build. We are going to use MSBuild to build our project.&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Task(&lt;span class=&quot;string&quot;&gt;&quot;Build&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .IsDependentOn(&lt;span class=&quot;string&quot;&gt;&quot;Restore-NuGet-Packages&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .Does(() =&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Use MSBuild&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      MSBuild(solution, settings =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        settings.SetConfiguration(configuration));  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Finishing-the-Cake-file&quot;&gt;&lt;a href=&quot;#Finishing-the-Cake-file&quot; class=&quot;headerlink&quot; title=&quot;Finishing the Cake file&quot;&gt;&lt;/a&gt;Finishing the Cake file&lt;/h2&gt;&lt;p&gt;Now that we have the basics in place, lets finish the basic setup that needs to happen. We need to create a default task that will execute one of the tasks we just defined.&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Task(&lt;span class=&quot;string&quot;&gt;&quot;Default&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .IsDependentOn(&lt;span class=&quot;string&quot;&gt;&quot;Build&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Next we need to actually tell Cake to run the target parameter, which is you remember when we defined our arguments we defaulted to &lt;em&gt;Default&lt;/em&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RunTarget(target);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now we need to execute the Cake file to see if all the work we have done will execute and build our project.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ .\build.ps1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;You should see the following output:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Preparing to run build script...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Running build script...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Analyzing build script...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Processing build script...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Compiling build script...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;========================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Clean&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;========================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Executing task: Clean&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Cleaning directory C:/Users/cphil/code/Cake.XdtTransform/src/Cake.XdtTransform/bin/Release&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Finished executing task: Clean&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;========================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Restore-NuGet-Packages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;========================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Executing task: Restore-NuGet-Packages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;MSBuild auto-detection: using msbuild version &amp;apos;14.0&amp;apos; from &amp;apos;C:\Program Files (x86)\MSBuild\14.0\bin&amp;apos;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;All packages listed in packages.config are already installed.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Finished executing task: Restore-NuGet-Packages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;========================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;========================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Executing task: Build&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Microsoft (R) Build Engine version 14.0.25420.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Copyright (C) Microsoft Corporation. All rights reserved.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build started 7/24/2016 2:32:43 PM.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     1&amp;gt;Project &amp;quot;C:\Users\cphil\code\Cake.XdtTransform\src\Cake.XdtTransform.sln&amp;quot; on node 1 (Build target(s)).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     1&amp;gt;ValidateSolutionConfiguration:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         Building solution configuration &amp;quot;Release|Any CPU&amp;quot;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     1&amp;gt;Project &amp;quot;C:\Users\cphil\code\Cake.XdtTransform\src\Cake.XdtTransform.sln&amp;quot; (1) is building &amp;quot;C:\Users\cphil\code\C&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       ake.XdtTransform\src\Cake.XdtTransform\Cake.XdtTransform.csproj&amp;quot; (3) on node 1 (default targets).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     2&amp;gt;Done Building Project &amp;quot;C:\Users\cphil\code\Cake.XdtTransform\src\Cake.XdtTransform.Tests\Cake.XdtTransform.Tests&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       .csproj&amp;quot; (default targets).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     1&amp;gt;Done Building Project &amp;quot;C:\Users\cphil\code\Cake.XdtTransform\src\Cake.XdtTransform.sln&amp;quot; (Build target(s)).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build succeeded.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0 Warning(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    0 Error(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Time Elapsed 00:00:00.38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Finished executing task: Build&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;========================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;========================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Executing task: Default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Finished executing task: Default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Task                          Duration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Clean                         00:00:00.0091045&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Restore-NuGet-Packages        00:00:00.3995194&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build                         00:00:00.4472326&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Default                       00:00:00.0098848&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Total:                        00:00:00.8657413&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;So it looks like we had a successful run of our Cake file. At this point we could just stop, but continue on as now we are getting into the more advanced topics.&lt;/p&gt;
&lt;h2 id=&quot;Step-5&quot;&gt;&lt;a href=&quot;#Step-5&quot; class=&quot;headerlink&quot; title=&quot;Step 5:&quot;&gt;&lt;/a&gt;Step 5:&lt;/h2&gt;&lt;p&gt;In this step we are going to create a task that will execute our unit tests. In this example we are using &lt;a href=&quot;http://fixie.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fixie&lt;/a&gt;, however, most major unit testing frameworks are supported. We will be adding a new concept that this step. We are going to start using the &lt;em&gt;tool&lt;/em&gt; directive. The &lt;em&gt;tool&lt;/em&gt; directive tells Cake that it needs to download additional tools to perform one of the tasks. The &lt;em&gt;tool&lt;/em&gt; directive will place the tool package in the &lt;em&gt;tools&lt;/em&gt; directory that the bootstrapper downloads NuGet and Cake too.&lt;/p&gt;
&lt;p&gt;At the top of our Cake build file put the following &lt;em&gt;tool&lt;/em&gt; directive.&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#tool &quot;nuget:?package=Fixie&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now that we have the Fixie unit test runner being downloaded as part of our Cake file, we need to create our unit test task. In this task we use a pattern to tell Cake to search all directories looking for a bin folder and a configuration folder that matches and return all dlls with the name &lt;em&gt;Tests.dll&lt;/em&gt;. Also note that our task is dependent on the build task.&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Task(&lt;span class=&quot;string&quot;&gt;&quot;Run-Unit-Tests&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .IsDependentOn(&lt;span class=&quot;string&quot;&gt;&quot;Build&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .Does(() =&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Fixie(&lt;span class=&quot;string&quot;&gt;&quot;./src/\*\*/bin/&quot;&lt;/span&gt; + configuration + &lt;span class=&quot;string&quot;&gt;&quot;/*.Tests.dll&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now that we have our test task in place and I want the default behavior to always run the unit tests. So I need to change the default task.&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Task(&lt;span class=&quot;string&quot;&gt;&quot;Default&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .IsDependentOn(&lt;span class=&quot;string&quot;&gt;&quot;Run-Unit-Tests&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now we need to execute our Cake file and make sure nothing has been broken.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ .\build.ps1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;You should see the following output:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;C:\Users\cphil\code\Cake.XdtTransform [develop ≡ +0 ~1 -0 !]&amp;gt; .\build.ps1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Preparing to run build script...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Running build script...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Analyzing build script...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Processing build script...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Installing tools...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Compiling build script...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...................&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;========================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Run-Unit-Tests&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;========================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Executing task: Run-Unit-Tests&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;------ Testing Assembly Cake.XdtTransform.Tests.dll ------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6 passed, 0 failed, took 0.33 seconds (Fixie 1.0.2).&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Finished executing task: Run-Unit-Tests&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;========================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;========================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Executing task: Default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Finished executing task: Default&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Task                          Duration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Clean                         00:00:00.0179829&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Restore-NuGet-Packages        00:00:00.4070517&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build                         00:00:00.4498772&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Run-Unit-Tests                00:00:00.4413167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Default                       00:00:00.0104593&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Total:                        00:00:01.3266878&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;It looks like our tests all executed successfully and now we celebrate, but wait what good is all this work if we are not sharing it with the world.&lt;/p&gt;
&lt;p&gt;Step 6:&lt;/p&gt;
&lt;p&gt;If you look in the source directory under the Cake.XdtTransform folder you will notice that there is a nuspec file located in the directory called Cake.XdtTransform.nuspec. Since we have a nuspec file we should go ahead and create a NuGet package while we are here.&lt;/p&gt;
&lt;p&gt;Luckily, the creators of Cake have already created the necessary tools to perform the packaging. All we need to do is create a task. We are going to name the task &lt;em&gt;Package&lt;/em&gt; and we are going to make it dependent on the &lt;em&gt;Run-Unit-Tests&lt;/em&gt; task, because we do not want to package if we fail our tests. We are not going to make this the default task as we want this task to be intentional.&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Task(&lt;span class=&quot;string&quot;&gt;&quot;Package&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .IsDependentOn(&lt;span class=&quot;string&quot;&gt;&quot;Run-Unit-Tests&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .Does(() =&amp;gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NuGetPack(&lt;span class=&quot;string&quot;&gt;&quot;./src/Cake.XdtTransform/Cake.XdtTransform.nuspec&quot;&lt;/span&gt;, ​&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NuGetPackSettings());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now to test our handy work, we are going to run the Cake file, but this time we are going to pass a target of &lt;em&gt;Package&lt;/em&gt;. What this will do is execute the &lt;em&gt;Package&lt;/em&gt; task.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ .\build.ps1 -Target Package&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;You should see the following output:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;C:\Users\cphil\code\Cake.XdtTransform [develop ≡ +0 ~1 -0 !]&amp;gt; .\build.ps1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Preparing to run build script...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Running build script...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Analyzing build script...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Processing build script...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Installing tools...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Compiling build script...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...................&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;========================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Package&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;========================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Executing task: Package&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Attempting to build package from &amp;apos;Cake.XdtTransform.temp.nuspec&amp;apos;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Successfully created package &amp;apos;C:\Users\cphil\code\Cake.XdtTransform\Cake.XdtTransform.0.10.0.0.nupkg&amp;apos;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Finished executing task: Package&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Task                          Duration&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Clean                         00:00:00.0127528&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Restore-NuGet-Packages        00:00:00.4139956&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Build                         00:00:00.4605471&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Run-Unit-Tests                00:00:00.4670142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Package                       00:00:00.4101675&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Total:                        00:00:01.7644772&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;The-finish-line&quot;&gt;&lt;a href=&quot;#The-finish-line&quot; class=&quot;headerlink&quot; title=&quot;The finish line&quot;&gt;&lt;/a&gt;The finish line&lt;/h1&gt;&lt;p&gt;So there you go, a basic walk through using Cake to perform the majority of the tasks that will need to be performed when working on a project. I have purposely left off the publishing of the project to a server or in this case NuGet, as there are more steps involved and those tasks are more about preference at that point. I know that I will probably let my CI server for the project, AppVeyor pick up the NuGet packae as an artifact and publish it. I may revist that in the new future as I learn to integrate Cake with a CI server.&lt;/p&gt;
&lt;p&gt;Thanks for reading and hopefully you found this helpful.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Hi, my name is Jamie and I am a &lt;a href=&quot;http://cakebuild.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cake&lt;/a&gt; addin author that doesn’t build m
    
    </summary>
    
    
      <category term="Open Source" scheme="http://www.phillipsj.net/tags/Open-Source/"/>
    
      <category term="Cake" scheme="http://www.phillipsj.net/tags/Cake/"/>
    
      <category term="Tutorials" scheme="http://www.phillipsj.net/tags/Tutorials/"/>
    
  </entry>
  
  <entry>
    <title>Shockingly Sweet: Electron and Cake</title>
    <link href="http://www.phillipsj.net/2016/07/23/Shockingly-Sweet-Electron-and-Cake/"/>
    <id>http://www.phillipsj.net/2016/07/23/Shockingly-Sweet-Electron-and-Cake/</id>
    <published>2016-07-24T02:48:40.000Z</published>
    <updated>2016-07-27T02:44:41.435Z</updated>
    
    <content type="html">&lt;p&gt;We have recently started using &lt;a href=&quot;http://electron.atom.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Electron&lt;/a&gt; for an application we have been developing. We have enjoyed the experience so much we have decided as a team that all desktop applications going forward will be Electron based. This is great as it keeps the web development skills sharp even when making a desktop application, plus it leverages our knowledge in web technologies and we don’t have to context switch. &lt;/p&gt;
&lt;p&gt;To keep the consistency with all our other projects we decided to use Cake to build our Electron applications. We use &lt;a href=&quot;https://github.com/electron-userland/electron-builder&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;electron-builder&lt;/a&gt; to perform the heavy lifting with a few NPM scripts.  We then execute those NPM scripts using Cake. You can take a look at the complete solution &lt;a href=&quot;https://github.com/phillipsj/shockingly-sweet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt;. Below I will walk you through the Cake file.&lt;/p&gt;
&lt;p&gt;So we start off by getting the &lt;a href=&quot;https://github.com/philo/cake-npm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cake.Npm&lt;/a&gt; addin.&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#addin Cake.Npm&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;With the addin for NPM added we have the typical arguments section and as far as the default task, is typically what you see in Cake. We are going to focus on the Electron specific tasks.&lt;/p&gt;
&lt;p&gt;Calling an NPM script that configures the environment and performing an NPM install:&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Task(&lt;span class=&quot;string&quot;&gt;&quot;Npm-Install&quot;&lt;/span&gt;)   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .Does(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       Npm.RunScript(&lt;span class=&quot;string&quot;&gt;&quot;setupEnv&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       Npm.Install();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Running a clean on the project using an NPM script.&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Task(&lt;span class=&quot;string&quot;&gt;&quot;Clean&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .IsDependentOn(&lt;span class=&quot;string&quot;&gt;&quot;Npm-Install&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .Does(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Npm.RunScript(&lt;span class=&quot;string&quot;&gt;&quot;clean&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now we have the main part, which is running the dist NPM script that packages the application and builds the executable.&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Task(&lt;span class=&quot;string&quot;&gt;&quot;Build&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .IsDependentOn(&lt;span class=&quot;string&quot;&gt;&quot;Clean&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .Does(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Npm.RunScript(&lt;span class=&quot;string&quot;&gt;&quot;dist&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;So yes, the majority of this process relies upon NPM scripts, which we could easily just move the calls into the Cake file and out of the package.json.  The main advantage that I am not showing here, is the addins that we use like &lt;a href=&quot;https://github.com/RadioSystems/Cake.AzureStorage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cake.AzureStorage&lt;/a&gt; to push the packaged application to Azure, or some of the other addins we use that are just easier for us to create that functionality in .NET. &lt;/p&gt;
&lt;p&gt;Hope this is helpful.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;We have recently started using &lt;a href=&quot;http://electron.atom.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Electron&lt;/a&gt; for an application we have 
    
    </summary>
    
    
      <category term="Open Source" scheme="http://www.phillipsj.net/tags/Open-Source/"/>
    
      <category term="Cake" scheme="http://www.phillipsj.net/tags/Cake/"/>
    
      <category term="Electron" scheme="http://www.phillipsj.net/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>Learning Fixie and Should</title>
    <link href="http://www.phillipsj.net/2016/07/23/Learning-Fixie-and-Should/"/>
    <id>http://www.phillipsj.net/2016/07/23/Learning-Fixie-and-Should/</id>
    <published>2016-07-23T14:22:51.000Z</published>
    <updated>2016-07-23T14:49:16.311Z</updated>
    
    <content type="html">&lt;p&gt;To be a good steward of my Cake.XdtTransform project, I decided that I needed to add some unit tests. With such a small project with very little functionality, I took it as an opportunity to learn a new tool. I have looked at the &lt;a href=&quot;http://fixie.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fixie&lt;/a&gt; project a few times, but haven’t really given it much thought as I have the most experience with &lt;a href=&quot;http://nunit.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NUnit&lt;/a&gt; and &lt;a href=&quot;https://xunit.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;xUnit&lt;/a&gt;. As with any new tool, I wanted to make sure it would work with my intended work flow and of course it does, as it is already in Cake.&lt;/p&gt;
&lt;p&gt;To get started all you have to do is use NuGet to install, then you can start writing your tests. The interesting part is that Fixie relies on convention over configuration and doesn’t require all the ceremony of attributes. Just create a class that ends with “Tests” in it’s name and the test runner will pick it up. Now, if you are used to a framework that provides an assertion library baked in, that is not Fixie. You will have to pick an assertion library that fits your needs. In the examples for Fixie, &lt;a href=&quot;https://github.com/erichexter/Should&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Should&lt;/a&gt; is used, so I decided I would give it a try. Should is a nice library, but you have to think very differently about how to write your test.&lt;/p&gt;
&lt;p&gt;Here is a test in xUnit:&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; [Fact]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Should_Error_If_Source_File_Is_Null&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;// Given&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fixture = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XdtTransformationFixture &amp;#123;SourceFile = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;// When&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = Record.Exception(() =&amp;gt; fixture.TransformConfig());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;// Then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     Assert.IsExceptionWithMessage&amp;lt;ArgumentNullException&amp;gt;(result, &lt;span class=&quot;string&quot;&gt;&quot;sourceFile&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And here is a test with Fixie:&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ShouldErrorIfSourceFileIsNull&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Given&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fixture = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; XdtTransformationFixture &amp;#123;SourceFile = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// When&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = Record.Exception(() =&amp;gt; fixture.TransformConfig());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Then&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result.ShouldBeType&amp;lt;ArgumentNullException&amp;gt;().ParamName.ShouldEqual(&lt;span class=&quot;string&quot;&gt;&quot;sourceFile&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;As you can see they are not that different until you get to the assertion. This was the hard part as it is a different way of thinking. You are not comparing two results you are using the result, then you are asserting what the different properties of the result should be. Once I got my mind wrapped around that concept, it became pretty easy to write tests using Should. There are several other choices for assertions and there is a list in the Fixie documentation.&lt;/p&gt;
&lt;p&gt;I really like how Fixie is simple to get started with, uses conventions, and doesn’t provide an assertion library by default. It has made me think just a little differently about choices. Funny how you don’t think you can use a different assertion library with your go to unit testing framework, but you can. So you like Should, I don’t see any reason you couldn’t use it with your favorite unit testing library. &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;To be a good steward of my Cake.XdtTransform project, I decided that I needed to add some unit tests. With such a small project with very
    
    </summary>
    
    
      <category term="Open Source" scheme="http://www.phillipsj.net/tags/Open-Source/"/>
    
      <category term="Cake" scheme="http://www.phillipsj.net/tags/Cake/"/>
    
  </entry>
  
  <entry>
    <title>Integrity Scan</title>
    <link href="http://www.phillipsj.net/2016/07/17/Integrity-Scan/"/>
    <id>http://www.phillipsj.net/2016/07/17/Integrity-Scan/</id>
    <published>2016-07-17T23:40:02.000Z</published>
    <updated>2016-07-19T02:48:30.898Z</updated>
    
    <content type="html">&lt;p&gt;So I have recently been through a soft skills based training program at my current company. This coupled with the business coach that the company provided has been a tremendous boost to me both professionally and personally. I have grown so much over the last year and it is all finally starting to come together and I am learning to cope with situations that I would never have dreamed I could handle. As part of this training I was provided a list of books that one of th coaches thought would help polish some of my skills. One of those was &lt;a href=&quot;https://www.amazon.com/Fierce-Conversations-Achieving-Success-Conversation/dp/0425193373/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1468799492&amp;amp;sr=1-1&amp;amp;keywords=fierce+conversations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;“Fierce Conversations”&lt;/a&gt; by Susan Scott. I am not very far into the book and I have already found it very inspirational and as far as I am concerned a must read by everyone. The book has some hard hitting stories of issues within companies that result from the companies values not aligning with how they are acting. The same is also applied to you personally, if you are acting in a way counter to your values then you have an integrity issue and you need to perform an “integrity scan”.  There is also a really interesting section on &lt;a href=&quot;https://en.wikipedia.org/wiki/Psychoneuroimmunology&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Psychoneuroimmunology&lt;/a&gt;, which is something I am going to need to read more about, but the basic introduction is very interesting. &lt;/p&gt;
&lt;p&gt;With all of this said, I just wanted to blog about this as a way to get this written down. This is going to serve a purpose for me and I hope that you find these items interesting too. So a few interesting quotes have appeared in a matter of about ten pages that have simply sparked something inside me. I am going to share them here as I found this are very shocking to the system even though I feel that we all inherently know this information, but sometimes you just need it plainly stated.&lt;/p&gt;
&lt;p&gt;The quote below is in reference to mission statements, but I find that it can be applied to a lot more than mission statements.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;You cannot impose those beliefs and values on people by twisting and banging and rewarding and sanctioning and inspiring and motivating and hanging your imposition on the wall, no matter how noble a statement you have conceived, because if you do, you become a propagandist and you spend your corporate life’s energy attempting to push, pull, and persuade rather than get on with the business of your business, whatever it may be.&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;Susan Scott&lt;/strong&gt;&lt;cite&gt;Fierce Conversations&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;Isn’t this statement so true? Sometimes people spend so much of their energy trying to get people to think like they do than just focusing on their business. I find myself doing this very thing. As a developer and technologist, I find that at times I am trying to push my own propaganda than getting on with business. Maybe that is why I really like Dan North’s stuff, right, it is all about adding business value and frankly, most of the crap we talk about in meetings doesn’t really add much value. I can only imagine how effective companies would be if we spent more time on doing the business of our business, than trying to push strategies, agendas, etc. &lt;/p&gt;
&lt;p&gt;Then there is this quote.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;As a leader, you get what you tolerate.&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;Susan Scott&lt;/strong&gt;&lt;cite&gt;Fierce Conversations&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;Wow, what a gut punch. This just rung my bell and cut deep. As a leader in your organization this has to hit home, it does it for me. I feel that I have a high level of integrity and I am usually quick to let people know if I don’t like something, but I am not always there after the statement, I let it float there. So if you get what you tolerate, then how do you go about letting people know what is intolerable? No clue, but I think this needs a little caution, right. So know I have to pull out a Thomas Jefferson quote.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;In matters of style, swim with the current; in matters of principle, stand like a rock.&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;Thomas Jefferson&lt;/strong&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;I think we need to make sure that it is truly a matter of principle before we become intolerant. We have to respect that people work and solve problems differently and we need that diversity to be a successful business.  However, in matters of principle, those core values, beliefs, etc. that are fundamental to who you are personally and as a company, you cannot tolerate the compromising of those. I find myself very stressed and in constant turmoil because I have not stayed true to the fundamental of who I am.  I am not behaving in a manner that is true to my core values.  I am not far from them, but I am not as aligned as I have been in the past and I can tell. As a company, I think this can be seen and felt based on moral, turnover, etc. How do you address a team member, group, or business unit that is not behaving consistent to company values? How do you continue to be true to the values and your values if they are not aligned?&lt;/p&gt;
&lt;p&gt;So I am going to work on getting real with myself and work through these issues above. I have lots of personal items to work through in addition. So the book proceeds after the information above to tell a story from Studs Terkel’s book &lt;a href=&quot;https://www.amazon.com/Working-People-Talk-About-What/dp/1565843428&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;“Working”&lt;/a&gt;. This statement I find very true with pockets of people through out my entire life.  To frame the quote below it is about a young woman you landed her first job and wanted to give it her best.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The problem was, her coworkers made it clear in subtle and not so subtle ways that if she brought everything she had to the task, she would wreck the curve for everyone else.&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;Studs Terkel&lt;/strong&gt;&lt;cite&gt;Working&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;Hopefully that hit home for many people, it did me. I am not very tolerant when people are not bringing their best to their job. I don’t expect it all the time, but I expect it the majority of the time. People can have off times, but if you are not bringing your “everything” to what you are doing then why even do it. If you don’t feel it is worth your best effort, then find something better to do with your time.  I expect technical excellence from my team and I expect them to bring their best. What I have found is people like it when others believe in them and want them to do their best. I will take someone who brings their best and is willing to work than someone with “natural talent”(I know about Malcom Gladwell and I agree with him). Then next part of the book came this statement.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Within a month, I had absented my spirit from my work.&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;Studs Terkel&lt;/strong&gt;&lt;cite&gt;Working&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;That makes my cringe. I don’t want people to feel absented in their work. I want people to feel excited about coming to work. People that are excited are going to give it their all and that is what you need and that is what they need. It is a win-win-win for everyone involved. I get the distinctive feeling with some groups of people that they have “absented their spirit”, gave up on their values, and now their psychoneuroimmunology has been compromised.  With it compromised for a few we lose out on &lt;a href=&quot;https://en.wikipedia.org/wiki/Herd_immunity&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;herd immunity&lt;/a&gt; at work. With our immunity now compromised as a group we can start losing others that are less resilient to it. As example provided in the book was Enron, I would have to agree, it is how companies and individuals go from doing what is true to themselves to doing things they would never believe. Now just when you think I cannot ramble any longer, I assure you this book keeps throwing punches like Muhammend Ali. Here is another hard hitting quote.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;If you want to see someone in real pain, watch someone who knows who he is and defaults on it on a regular basis.&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;Pam Murray&lt;/strong&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;This calls me to action and is the main driver for even making this post. I feel at times I am in pain, do to the decisions that I am left to make. I feel that none of my decisions are desirable, but then I realize that actually I have more freedom and don’t have to make a decision based on the options that I am given, I can always choose an option that is not presented. This is a false choice, logical fallacy, grifting, manipulation, etc. You always have the option to choose an option that was presented. People use this to manipulate you to the outcome that they desire and  try to steal your joy in your work.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;However, if your job is no longer appropriate or sufficient for you and the situation cannot be remedied unless you were to become a different human being entirely, it’s time to leave.&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;Susan Scott&lt;/strong&gt;&lt;cite&gt;Fierce Conversations&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;This is a powerful statement and one that resonates. After all of this, I am going to let the previous one and this last one simmer on my mind.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I am successful to the degree that who I am and what I live are in alignment.&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;Susan Scott&lt;/strong&gt;&lt;cite&gt;Fierce Conversations&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;If you made it to the end, I really appreciate the time that you took to read what is on my mind. I hope to get back to the regularly scheduled program, but it may take a few more of these to get it all out.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;So I have recently been through a soft skills based training program at my current company. This coupled with the business coach that the
    
    </summary>
    
    
      <category term="Books" scheme="http://www.phillipsj.net/tags/Books/"/>
    
      <category term="Soft Skills" scheme="http://www.phillipsj.net/tags/Soft-Skills/"/>
    
  </entry>
  
  <entry>
    <title>BunsenLabs, awesome continuation of a legacy</title>
    <link href="http://www.phillipsj.net/2016/06/25/BunsenLabs-awesome-continuation-of-a-legacy/"/>
    <id>http://www.phillipsj.net/2016/06/25/BunsenLabs-awesome-continuation-of-a-legacy/</id>
    <published>2016-06-26T01:50:23.000Z</published>
    <updated>2016-06-26T02:00:27.033Z</updated>
    
    <content type="html">&lt;p&gt;So of all linux distrubutions that exist, by far my favorite has probably been CrunchBang linux. It is a distribution built on Debian with a wonderful window manager. CrunchBang used OpenBox and created a whole distro that was built around its speed an simplicity. However, as all good things it came to and end. Wanting to replace my slow Ubuntu VM, I went back to the CrunchBang website to see if anyone has picked up the project. No one has, but there has been a few continuation projects that popped up under a new name. Out of all of them, it is &lt;a href=&quot;https://www.bunsenlabs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BunsenLabs&lt;/a&gt; is my favorite. The installation is a breeze and configuration is smooth as butter.&lt;/p&gt;
&lt;p&gt;If you are looking for a lightweight linux distro for running as a VM or to run on older hardware, then give BunsenLabs a consideration.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;So of all linux distrubutions that exist, by far my favorite has probably been CrunchBang linux. It is a distribution built on Debian wit
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.phillipsj.net/tags/Linux/"/>
    
      <category term="Open Source" scheme="http://www.phillipsj.net/tags/Open-Source/"/>
    
  </entry>
  
  <entry>
    <title>XML Docs for Cake Addins</title>
    <link href="http://www.phillipsj.net/2016/06/18/XML-Docs-for-Cake-Addins/"/>
    <id>http://www.phillipsj.net/2016/06/18/XML-Docs-for-Cake-Addins/</id>
    <published>2016-06-18T13:59:28.000Z</published>
    <updated>2016-06-18T14:02:01.326Z</updated>
    
    <content type="html">&lt;p&gt;As most that know me or have been following this blog, I absolutely love &lt;a href=&quot;http://cakebuild.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cake&lt;/a&gt; build tools. To be a better steward in the community of the addins that&lt;br&gt;I created and another that I help maintain, I updated the XML documentation and submitted a pull reques to finally have these added to the Addins section of the Cake website.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;As most that know me or have been following this blog, I absolutely love &lt;a href=&quot;http://cakebuild.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;C
    
    </summary>
    
    
      <category term="Open Source" scheme="http://www.phillipsj.net/tags/Open-Source/"/>
    
      <category term="Cake" scheme="http://www.phillipsj.net/tags/Cake/"/>
    
  </entry>
  
  <entry>
    <title>Fun with Electron</title>
    <link href="http://www.phillipsj.net/2016/05/13/Fun-with-Electron/"/>
    <id>http://www.phillipsj.net/2016/05/13/Fun-with-Electron/</id>
    <published>2016-05-14T00:00:00.000Z</published>
    <updated>2016-05-31T00:12:01.649Z</updated>
    
    <content type="html">&lt;p&gt;So I have had the privilege to get to learn a little about &lt;a href=&quot;http://electron.atom.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Electron&lt;/a&gt;. My team&lt;br&gt;inherited an app that was built using &lt;a href=&quot;http://appjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AppJS&lt;/a&gt;. Since that project is deprecated,&lt;br&gt;we needed to move it to a new platform. I started looking around and decided to&lt;br&gt;give Electron a try since I have been using &lt;a href=&quot;https://atom.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Atom&lt;/a&gt; and &lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;VSCode&lt;/a&gt;. Another great&lt;br&gt;thing about Electron is that we can get to keep our deployment consistent since&lt;br&gt;it also uses &lt;a href=&quot;https://github.com/Squirrel/Squirrel.Windows&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Squirrel.Windows&lt;/a&gt; like we have started using for our other desktop&lt;br&gt;apps. An added bonus is we can use &lt;a href=&quot;http://facebook.github.io/react/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React&lt;/a&gt; also.&lt;/p&gt;
&lt;p&gt;My only recommendation is that it helps to have the following items installed on&lt;br&gt;a Windows System as it will make building any native node modules easier.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/downloads/release/python-2711/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Python 2.7.x&lt;/a&gt; matching the bitness of your Node.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=44266&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Visual C++ Compiler for Python 2.7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.visualstudio.com/vs-2015-product-editions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Visual C++ for Visual Studio 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.microsoft.com/en-us/windows/downloads/windows-8-1-sdk&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Windows 8.1 SDK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;So I have had the privilege to get to learn a little about &lt;a href=&quot;http://electron.atom.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Electron&lt;/a&gt;
    
    </summary>
    
    
      <category term="Electron" scheme="http://www.phillipsj.net/tags/Electron/"/>
    
      <category term="OSS" scheme="http://www.phillipsj.net/tags/OSS/"/>
    
      <category term="Node" scheme="http://www.phillipsj.net/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript: The Orchard Way</title>
    <link href="http://www.phillipsj.net/2015/12/18/JavaScript-The-Orchard-Way/"/>
    <id>http://www.phillipsj.net/2015/12/18/JavaScript-The-Orchard-Way/</id>
    <published>2015-12-19T00:00:00.000Z</published>
    <updated>2016-05-31T00:23:39.728Z</updated>
    
    <content type="html">&lt;p&gt;So I have been attending the &lt;a href=&quot;http://www.orchardproject.net/discussions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Orchard community&lt;/a&gt; meetings since we started to&lt;br&gt;use Orchard for our current project. Orchard is a great system that is very&lt;br&gt;moduler, with hooks and interfaces that can be overridden in a very easy way, once&lt;br&gt;you learn it. So this past week, the discussion turned to what JavaScript framework&lt;br&gt;should be used for Orchard core javascript needs. We all know that the conversation&lt;br&gt;quickly went to &lt;a href=&quot;https://angularjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Angular&lt;/a&gt;.  There were several other frameworks discussed, but the&lt;br&gt;top two were clearly Angular and &lt;a href=&quot;http://facebook.github.io/react/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReactJS&lt;/a&gt;. Then an interesting question surfaced&lt;br&gt;from &lt;a href=&quot;http://weblogs.asp.net/bleroy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bertrand&lt;/a&gt;, it was “Which one is the Orchard way?”. So I know that the Orchard&lt;br&gt;team has a very defined culture and I have heard that statement several times in the&lt;br&gt;past, but it got me wondering if a blog post or any formal statement of “The Orchard Way”&lt;br&gt;has been created. With that I stumbled on to a &lt;a href=&quot;https://weblogs.asp.net/bleroy/the-orchard-way&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;post&lt;/a&gt; by Bertrand that has the answer.&lt;/p&gt;
&lt;p&gt;So with that answered, the next question is which framework is the closest to that&lt;br&gt;philosophy. After binging for around the internet to gather a few more opinions&lt;br&gt;to see if I felt differently I do not. ReactJS provies a very easy and clear&lt;br&gt;mental model. This is a very basic statement if what is happening to illustrate the point.&lt;br&gt;You create components that are encapsulated, reusable, and have a single responsibility.&lt;br&gt;Data is pushed down from each parent and the child component that needs some data recieves it&lt;br&gt;from the parent. Does this sound familiar, it sounds similar to Bertrand’s example,&lt;br&gt;where the car builder has assembelers that only fulfill one specific component and&lt;br&gt;they don’t worry about the other components. Now I am going to stretch the example&lt;br&gt;a litte, because I am sure if there is something need by the assemblers then a&lt;br&gt;call is made and more information is pushed down from a higher level, sounds a&lt;br&gt;lot like the one-way data flow provided forced by React. Which leads me to the qoute&lt;br&gt;found in &lt;a href=&quot;https://github.com/kmcclosk/reactjs-rxjs-example&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;this&lt;/a&gt; readme, “Its (React) sort of like the Actor Model”, which I agree it&lt;br&gt;is kind of like that. So if you think about how each component is an actor that can&lt;br&gt;contain actors and those components send messages with actions back up, etc.&lt;/p&gt;
&lt;p&gt;So to end, I do this that React is more like Elon’s factory than Greg’s, so that&lt;br&gt;is why I feel Orchard should choose React.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;So I have been attending the &lt;a href=&quot;http://www.orchardproject.net/discussions&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Orchard community&lt;/a&gt; mee
    
    </summary>
    
    
      <category term="Open Source" scheme="http://www.phillipsj.net/tags/Open-Source/"/>
    
      <category term="Orchard" scheme="http://www.phillipsj.net/tags/Orchard/"/>
    
      <category term="ReactJS" scheme="http://www.phillipsj.net/tags/ReactJS/"/>
    
  </entry>
  
  <entry>
    <title>Cake.Squirrel</title>
    <link href="http://www.phillipsj.net/2015/12/04/Cake-Squirrel/"/>
    <id>http://www.phillipsj.net/2015/12/04/Cake-Squirrel/</id>
    <published>2015-12-05T00:00:00.000Z</published>
    <updated>2016-05-31T00:17:55.056Z</updated>
    
    <content type="html">&lt;p&gt;Just published a new package called &lt;a href=&quot;https://www.nuget.org/packages/Cake.Squirrel/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cake.Squirrel&lt;/a&gt;. It integrates &lt;a href=&quot;https://github.com/Squirrel/Squirrel.Windows&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Squirrel.Windows&lt;/a&gt;&lt;br&gt;into the Cake pipeline so you can now create your Squirrel package using Cake.&lt;/p&gt;
&lt;p&gt;Still a little work left to do, I would like to add a fluent API, so keep&lt;br&gt;checking back.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Just published a new package called &lt;a href=&quot;https://www.nuget.org/packages/Cake.Squirrel/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cake.Squirrel&lt;
    
    </summary>
    
    
      <category term="Open Source" scheme="http://www.phillipsj.net/tags/Open-Source/"/>
    
      <category term="Cake" scheme="http://www.phillipsj.net/tags/Cake/"/>
    
  </entry>
  
  <entry>
    <title>I like surprises, especially when Cake is involved!</title>
    <link href="http://www.phillipsj.net/2015/11/30/I-like-surprises-especially-when-Cake-is-involved/"/>
    <id>http://www.phillipsj.net/2015/11/30/I-like-surprises-especially-when-Cake-is-involved/</id>
    <published>2015-12-01T00:00:00.000Z</published>
    <updated>2016-05-31T00:23:07.303Z</updated>
    
    <content type="html">&lt;p&gt;So I was working today to consume a Cake addin that isn’t fully baked. It is&lt;br&gt;an addin that we needed. So I cloned the repo and pushed a copy of the package&lt;br&gt;to a &lt;a href=&quot;https://www.myget.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MyGet.org&lt;/a&gt; to consume as part of our build. I added a custom NuGet.config&lt;br&gt;file to my Cake tools directory, but Cake would not install the addin. So I just&lt;br&gt;added it to the packages.config, still no dice.  I had to use the older syntax:&lt;/p&gt;
&lt;script src=&quot;//gist.github.com/556e127e16ed712dbf0b.js?file=OldSyntax.cs&quot;&gt;&lt;/script&gt;
&lt;p&gt;I wasn’t satisfied with this solution, so I jumped on the Cake Gitter, who doesn’t&lt;br&gt;lover Gitter, and starting asking some questions. I was soon digging into the&lt;br&gt;source and discovered that as part of parsing the addin directive if you put the&lt;br&gt;source after the package name it woud use it. So now I could use the #addin syntax&lt;br&gt;like so:&lt;/p&gt;
&lt;script src=&quot;//gist.github.com/9f6f8cac2a1bd05f0e9a.js?file=syntax.cs&quot;&gt;&lt;/script&gt;
&lt;p&gt;So all you have to due is specify a source that can be consumed by NuGet.exe and&lt;br&gt;you can use the #addin syntax.&lt;/p&gt;
&lt;p&gt;Such a pleasant surprise, Cake doesn’t dissapoint.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;So I was working today to consume a Cake addin that isn’t fully baked. It is&lt;br&gt;an addin that we needed. So I cloned the repo and pushed 
    
    </summary>
    
    
      <category term="Open Source" scheme="http://www.phillipsj.net/tags/Open-Source/"/>
    
      <category term="Cake" scheme="http://www.phillipsj.net/tags/Cake/"/>
    
  </entry>
  
  <entry>
    <title>Web Compiler with a side of Cake</title>
    <link href="http://www.phillipsj.net/2015/11/25/Web-Compiler-with-a-side-of-Cake/"/>
    <id>http://www.phillipsj.net/2015/11/25/Web-Compiler-with-a-side-of-Cake/</id>
    <published>2015-11-26T00:00:00.000Z</published>
    <updated>2016-05-31T00:29:28.729Z</updated>
    
    <content type="html">&lt;p&gt;My team has been using &lt;a href=&quot;http://facebook.github.io/react/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React&lt;/a&gt; to create any front-end components that need&lt;br&gt;to be interactive. So far it has been a pleasant experience. We started using&lt;br&gt;JSX for our HTML. However, now that we are nearing a production release we wanted&lt;br&gt;to precompile the JSX. We had intially planned to use the &lt;a href=&quot;http://reactjs.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React.NET&lt;/a&gt; project, but&lt;br&gt;the JSX support has been dropped in support of using &lt;a href=&quot;https://babeljs.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Babel&lt;/a&gt;. Babel’s documentation&lt;br&gt;isn’t the best, so in looking for alternatives before diving in to Babel, I stumbled&lt;br&gt;across &lt;a href=&quot;https://github.com/madskristensen/WebCompiler&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web Compiler&lt;/a&gt; by Mads Kristensen. It just so happens that there is a&lt;br&gt;Visual Studio Extension for it and it will compile LESS, SASS, JSX, and CoffeeScript.&lt;br&gt;Since we are planning to use SASS in the future this appeared to be a great option. The&lt;br&gt;extension makes it easy to use as part of the IDE. There is also a nuget package for it&lt;br&gt;that makes it easy to use with MSBUILD. Now that all of our needs are covered it is&lt;br&gt;time to see if we can get it to work with Cake.&lt;/p&gt;
&lt;p&gt;Configuring Web Compiler for use with Cake was extremely easy. Here are the steps&lt;br&gt;needed to have Web Compiler working as part of your Cake builds.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Edit your packages.config for Cake, you also need Cake.MSBuildTask.&lt;/p&gt;
&lt;script src=&quot;//gist.github.com/d5d236d048341b4c37e0.js?file=packages.config&quot;&gt;&lt;/script&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now add the Web Compiler as an addin in your build.cake file.&lt;/p&gt;
&lt;script src=&quot;//gist.github.com/5b6e22c7eddccbd9c90d.js?file=Build.cale&quot;&gt;&lt;/script&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now create your JSX compile tasks, now use the GetFiles to find all compilerconfig.json files.&lt;/p&gt;
&lt;script src=&quot;//gist.github.com/75848d11d8d4a4ab091f.js?file=Build.cs&quot;&gt;&lt;/script&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It is that easy. I may, in the future, remove the need for the MSBuildTask runner.&lt;/p&gt;
&lt;p&gt;Hope someone finds this of value.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;My team has been using &lt;a href=&quot;http://facebook.github.io/react/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React&lt;/a&gt; to create any front-end compon
    
    </summary>
    
    
      <category term="Open Source" scheme="http://www.phillipsj.net/tags/Open-Source/"/>
    
      <category term="Cake" scheme="http://www.phillipsj.net/tags/Cake/"/>
    
  </entry>
  
  <entry>
    <title>Cake.XdtTransform</title>
    <link href="http://www.phillipsj.net/2015/10/21/Cake-XdtTransform/"/>
    <id>http://www.phillipsj.net/2015/10/21/Cake-XdtTransform/</id>
    <published>2015-10-22T00:00:00.000Z</published>
    <updated>2016-05-31T00:18:12.366Z</updated>
    
    <content type="html">&lt;p&gt;As part of moving our Orchard build over to Cake, I was trying to find a good&lt;br&gt;way to do the config transfomrs.  Cake offers a pretty good XML transform methods,&lt;br&gt;but I wanted a solution that used the XDT transform. A little quick googling and&lt;br&gt;I stumbled across this Github &lt;a href=&quot;https://github.com/cake-build/cake/issues/321&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;issue&lt;/a&gt;, so with this post I created an addin that&lt;br&gt;adds this functionality. Not realy a big deal, I didn’t think it was necessary&lt;br&gt;to pull that into the core as it adds an extra dependency that is probably not&lt;br&gt;really needed, but it is a nice to have.  You can find it up on Nuget also.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;As part of moving our Orchard build over to Cake, I was trying to find a good&lt;br&gt;way to do the config transfomrs.  Cake offers a pretty g
    
    </summary>
    
    
      <category term="Open Source" scheme="http://www.phillipsj.net/tags/Open-Source/"/>
    
      <category term="Cake" scheme="http://www.phillipsj.net/tags/Cake/"/>
    
  </entry>
  
  <entry>
    <title>Builds are better with Cake</title>
    <link href="http://www.phillipsj.net/2015/10/18/Builds-are-better-with-Cake/"/>
    <id>http://www.phillipsj.net/2015/10/18/Builds-are-better-with-Cake/</id>
    <published>2015-10-19T00:00:00.000Z</published>
    <updated>2016-05-31T00:17:38.750Z</updated>
    
    <content type="html">&lt;p&gt;As most of you know, my team has been using Orchard to build our next application.&lt;br&gt;While we have found the majority of what Orchard has to offer great, there&lt;br&gt;has been trouble with the build for Orchard. We decided it was time to create a&lt;br&gt;different way to build Orchard that was easier for junior devs to understand and&lt;br&gt;easier for us to consume.&lt;/p&gt;
&lt;p&gt;We narrowed it down to &lt;a href=&quot;https://github.com/psake/psake&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Psake&lt;/a&gt;, &lt;a href=&quot;http://fsharp.github.io/FAKE/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fake&lt;/a&gt;, or &lt;a href=&quot;http://cakebuild.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cake&lt;/a&gt;, as these really don’t require&lt;br&gt;anything special that isn’t already on our build servers. I have used tools like&lt;br&gt;&lt;a href=&quot;http://albacorebuild.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Albacore&lt;/a&gt; in the past, but the extra dependency on Ruby was the deal breaker.&lt;/p&gt;
&lt;p&gt;I have used all of these in the past, except for Cake. It is one of the newer&lt;br&gt;build systems on the scene and it just so happens to use C# for its syntax. I&lt;br&gt;have been happy with all, but considering we all primarily work in C#, it just&lt;br&gt;seemed like Cake would be the best fit.&lt;/p&gt;
&lt;p&gt;After having worked with Cake for the last two weeks converting the Orchard build&lt;br&gt;from MSBuild file to Cake, I can say that Cake is now easily my favorite build tool&lt;br&gt;and I cannot forsee wanting to use much of anything else. The community has been&lt;br&gt;great and helpful, most of the important tooling has already been created, the&lt;br&gt;only thing that I have had an issue with is changing my way of thinking. The shift&lt;br&gt;from MSBuild to a build tool like Cake, sometimes throws your mind for a loop.&lt;/p&gt;
&lt;p&gt;Cake supports of using MSBuild tasks, extra file helpers, Slack integration, etc.&lt;br&gt;all come in the form of an Addin.  Cake is easily extending using their Addin&lt;br&gt;structure, just add a little C# to a project, and Cake can now use that new feature.&lt;/p&gt;
&lt;p&gt;I have easily converted customized MSBuild tasks that the Orchard project has created&lt;br&gt;into a Cake Addin called &lt;a href=&quot;https://www.nuget.org/packages/Cake.Orchard/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Cake.Orchard&lt;/a&gt; and it is found on Nuget. I have almost&lt;br&gt;completed the conversation of the Orchard build and will be sharing that in the&lt;br&gt;near future.&lt;/p&gt;
&lt;p&gt;Stay tuned if you are interested in adding Cake to your projects.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;As most of you know, my team has been using Orchard to build our next application.&lt;br&gt;While we have found the majority of what Orchard ha
    
    </summary>
    
    
      <category term="Open Source" scheme="http://www.phillipsj.net/tags/Open-Source/"/>
    
      <category term="Orchard" scheme="http://www.phillipsj.net/tags/Orchard/"/>
    
      <category term="Cake" scheme="http://www.phillipsj.net/tags/Cake/"/>
    
  </entry>
  
  <entry>
    <title>Orchard and Azure AD Woes!</title>
    <link href="http://www.phillipsj.net/2015/10/08/Orchard-and-Azure-AD-Woes/"/>
    <id>http://www.phillipsj.net/2015/10/08/Orchard-and-Azure-AD-Woes/</id>
    <published>2015-10-09T00:00:00.000Z</published>
    <updated>2016-05-31T00:26:01.439Z</updated>
    
    <content type="html">&lt;p&gt;So my team and I have been using Orchard CMS to build the next version of our&lt;br&gt;product. Since we have been using Azure AD for authentication for our applicaions&lt;br&gt;it only made sense to wire Orchard and Azure AD together. The typical way that&lt;br&gt;it is suggested to be done is to Microsoft.Owin.Security.OpenIdConnect middleware.&lt;/p&gt;
&lt;p&gt;So we wired this up for Orchard, which was not a straight forward feat given the&lt;br&gt;sparse documentation around OWIN integration. This all worked great locally and&lt;br&gt;on our dev server. We decided to finally push a versiont to Azure to work through&lt;br&gt;our &lt;a href=&quot;http://www.stickyminds.com/article/hudsons-bay-start&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hudson Bay Start&lt;/a&gt;, it would be awful to be close to a deadline and find&lt;br&gt;any suprises.&lt;/p&gt;
&lt;p&gt;Well, I was hopeful as I have deployed stock Orchard to Azure several times getting&lt;br&gt;a feel for how it is going to work. The calamity struck, we were ramping up to&lt;br&gt;have some folks from another part of our business assist with creating content,&lt;br&gt;however, I enabled our custom modules and click the signin link and BAM! I&lt;br&gt;was greated with the following error:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The data protection operation was unsuccessful. This may have been caused by not&lt;br&gt;having the user profile loaded for the current thread’s user context, which may&lt;br&gt;be the case when the thread is impersonating.&lt;/strong&gt;&lt;/p&gt;
&lt;script src=&quot;//gist.github.com/ffa9fbdafad35f46aaf8.js?file=DataProtectionError.txt&quot;&gt;&lt;/script&gt;
&lt;p&gt;I quickly started googling and found several suggestions. I tried several different&lt;br&gt;approaches, until I pulled out &lt;a href=&quot;https://www.jetbrains.com/decompiler/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;dotPeek&lt;/a&gt; and dug a little through&lt;br&gt;&lt;em&gt;Microsoft.Owin.Security&lt;/em&gt; and noticed that I needed a different IDataProtectionProvider&lt;br&gt;that doesn’t use DPAPI. I finally got to a &lt;a href=&quot;http://stackoverflow.com/questions/23455579/generating-reset-password-token-does-not-work-in-azure-website&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;this&lt;/a&gt; on StackOverflow.  The suggestion&lt;br&gt;there was to implement the following:&lt;/p&gt;
&lt;script src=&quot;//gist.github.com/aa374e21ab5bc9b0ea54.js?file=MachineKeyDataProtector.cs&quot;&gt;&lt;/script&gt;
&lt;p&gt;Now that I had this implementation, I tried several of the other posts on StackOverflow&lt;br&gt;trying to use Autofac to inject the dependency in, however it was working.&lt;/p&gt;
&lt;p&gt;Again, I turned to dotPeek and was taking a look at what was going on with this&lt;br&gt;method:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;app.GetDataProtectionProvider()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;While looking at the method, I noticed this other extension method.:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;app.SetDataProtectionProvider(IDataProtectionProvider provider)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;So I added the following to my OwinMiddleware class in my Orchard Module&lt;br&gt;and &lt;strong&gt;IT WORKED!&lt;/strong&gt;&lt;/p&gt;
&lt;script src=&quot;//gist.github.com/b4b6ba3367b48bb37cc6.js?file=OwinMiddlware.cs&quot;&gt;&lt;/script&gt;
&lt;p&gt;This has been a two day issue that we have beent trying to determine what the cause.&lt;br&gt;I will be able to sleep soundly tonight.&lt;/p&gt;
&lt;p&gt;Hope someone else finds this helpful.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;So my team and I have been using Orchard CMS to build the next version of our&lt;br&gt;product. Since we have been using Azure AD for authentic
    
    </summary>
    
    
      <category term="Open Source" scheme="http://www.phillipsj.net/tags/Open-Source/"/>
    
      <category term="Orchard" scheme="http://www.phillipsj.net/tags/Orchard/"/>
    
      <category term="Azure" scheme="http://www.phillipsj.net/tags/Azure/"/>
    
      <category term="Owin" scheme="http://www.phillipsj.net/tags/Owin/"/>
    
  </entry>
  
  <entry>
    <title>Contrib to Dynamic Forms Module</title>
    <link href="http://www.phillipsj.net/2015/10/01/Contrib-to-Dynamic-Forms-Module/"/>
    <id>http://www.phillipsj.net/2015/10/01/Contrib-to-Dynamic-Forms-Module/</id>
    <published>2015-10-02T00:00:00.000Z</published>
    <updated>2016-05-31T00:18:54.166Z</updated>
    
    <content type="html">&lt;p&gt;Orchard CMS has this really cool module called Dynamic Forms.  It allows users&lt;br&gt;to create forms that can create submissions, bind to content types, or tie into&lt;br&gt;workflows. It is really powerful, but still a little rough around the edges. The&lt;br&gt;new 1.9.2 release is going to provide lots of polish to this feature.&lt;/p&gt;
&lt;p&gt;One item I noticed today was that there are form fields for most types of inputs&lt;br&gt;that you can create for content.  However, there is not a form field for URLs.&lt;br&gt;Probably not a big deal, however the particular reason that I am using Dynamic&lt;br&gt;Forms is for a content type that does have a URL field and that input needs to&lt;br&gt;be validated. So I quickly got in and got dirty. I created a URL form field and&lt;br&gt;just finished my pull request.  I hope it get accepted. If you would like to&lt;br&gt;take a look you can hope over to my &lt;a href=&quot;https://github.com/phillipsj&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github&lt;/a&gt; and take a look.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Orchard CMS has this really cool module called Dynamic Forms.  It allows users&lt;br&gt;to create forms that can create submissions, bind to co
    
    </summary>
    
    
      <category term="Orchard" scheme="http://www.phillipsj.net/tags/Orchard/"/>
    
      <category term="Dynamic Forms" scheme="http://www.phillipsj.net/tags/Dynamic-Forms/"/>
    
  </entry>
  
  <entry>
    <title>Orchard, Gulp, and VS2015 Build Errors</title>
    <link href="http://www.phillipsj.net/2015/09/29/Orchard-Gulp-and-VS2015-Build-Errors/"/>
    <id>http://www.phillipsj.net/2015/09/29/Orchard-Gulp-and-VS2015-Build-Errors/</id>
    <published>2015-09-30T00:00:00.000Z</published>
    <updated>2016-05-31T00:26:18.113Z</updated>
    
    <content type="html">&lt;p&gt;Recently, my team and I, have started using Visual Studio 2015 while working&lt;br&gt;on our Orchard project. Orchard has started using Gulp to manage building some&lt;br&gt;of the javascript used in the Layouts and Dynamic Forms modules. Since VS 2015&lt;br&gt;detects and automatically watches Gulp files, if you have a parameter set at the&lt;br&gt;top of the Gulp file, node modules start automatically downloading and all JS&lt;br&gt;and CSS start getting processed. This is great, until you recieve the following&lt;br&gt;error when publishing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The “CollectFilesinFolder” task failed unexpectedly. System.IO.PathTooLongException&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This error is thrown during the build due to the node_modules having crazy&lt;br&gt;file path lengths. The easiest way to circumvent this issue is to configure the&lt;br&gt;Layouts and Dynamic Forms modules project file to exclude the node_modules&lt;br&gt;folder.  This is quick and easy by adding the ExlcudeFoldersFromDeployment tag&lt;br&gt;in the first property group of each project file.&lt;/p&gt;
&lt;script src=&quot;//gist.github.com/ec49732c325b7de55d19.js?file=ExcludeExample.xml&quot;&gt;&lt;/script&gt;
&lt;p&gt;Once that has been added to those project files, publishing now works. Also with&lt;br&gt;this change my GIT deployments to an Azure Website magically started working&lt;br&gt;too. There seems to be a fix in place according to this Github &lt;a href=&quot;https://github.com/OrchardCMS/Orchard/issues/5649&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;issue&lt;/a&gt;, I am curious&lt;br&gt;if it is the same solution or not.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Recently, my team and I, have started using Visual Studio 2015 while working&lt;br&gt;on our Orchard project. Orchard has started using Gulp to
    
    </summary>
    
    
      <category term="Orchard" scheme="http://www.phillipsj.net/tags/Orchard/"/>
    
      <category term="Gulp" scheme="http://www.phillipsj.net/tags/Gulp/"/>
    
      <category term="VS2015" scheme="http://www.phillipsj.net/tags/VS2015/"/>
    
  </entry>
  
  <entry>
    <title>Orchard Layouts with JSON.NET</title>
    <link href="http://www.phillipsj.net/2015/09/11/Orchard-Layouts-with-JSON-NET/"/>
    <id>http://www.phillipsj.net/2015/09/11/Orchard-Layouts-with-JSON-NET/</id>
    <published>2015-09-12T00:00:00.000Z</published>
    <updated>2016-05-31T00:26:32.080Z</updated>
    
    <content type="html">&lt;p&gt;I have been developing a custom module that uses the Dynamic Forms module to&lt;br&gt;programitically create a form. When creating a form you need to also create a&lt;br&gt;layout. Below is an example from the PageCommands.cs in the Orchard&lt;br&gt;Pages module for creating a layout.&lt;/p&gt;
&lt;script src=&quot;//gist.github.com/8b7d4344331c36cd338a.js?file=StringLayout.cs&quot;&gt;&lt;/script&gt;
&lt;p&gt;This just looks unpleasing and error prone. I would like to look at creating&lt;br&gt;something like &lt;a href=&quot;https://github.com/DarthFubuMVC/htmltags&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HtmlTags&lt;/a&gt;, which would create a fluent and error free way to&lt;br&gt;build layouts. However, that is going to take a little effort to get figured out.&lt;br&gt;Until then, I decided I would try to use &lt;a href=&quot;http://www.newtonsoft.com/json&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSON.NET&lt;/a&gt; to build the layout. I feel that&lt;br&gt;using the JSON.NET objects make it easier and less error prone to generate larger&lt;br&gt;layouts.&lt;/p&gt;
&lt;p&gt;Here is an example using JSON.NET:&lt;/p&gt;
&lt;script src=&quot;//gist.github.com/948e2cb818d9e8439204.js?file=JsonLayout.cs&quot;&gt;&lt;/script&gt;
&lt;p&gt;I am going to spend some time looking for a better solution. As far as performance&lt;br&gt;goes, it does increase usage a little, but the improvement to readability is worth&lt;br&gt;it.&lt;/p&gt;
&lt;p&gt;Thanks for reading.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;I have been developing a custom module that uses the Dynamic Forms module to&lt;br&gt;programitically create a form. When creating a form you n
    
    </summary>
    
    
      <category term="Open Source" scheme="http://www.phillipsj.net/tags/Open-Source/"/>
    
      <category term="Orchard" scheme="http://www.phillipsj.net/tags/Orchard/"/>
    
  </entry>
  
  <entry>
    <title>First Orchard Pull Request</title>
    <link href="http://www.phillipsj.net/2015/09/09/First-Orchard-Pull-Request/"/>
    <id>http://www.phillipsj.net/2015/09/09/First-Orchard-Pull-Request/</id>
    <published>2015-09-10T00:00:00.000Z</published>
    <updated>2016-05-31T00:22:05.007Z</updated>
    
    <content type="html">&lt;p&gt;Lately my team and I have been working with &lt;a href=&quot;http://www.orchardproject.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Orchard&lt;/a&gt; CMS. We picked Orchard&lt;br&gt;because we are .NET developers and Orchard provided such a great framework to&lt;br&gt;start building our new system with that it put us months ahead. In addition we&lt;br&gt;did need the capabilities provided by the CMS modules, but in reality Orchard&lt;br&gt;could just have the CMS modules deactivated and still provide a great base.&lt;/p&gt;
&lt;p&gt;Now to my pull request.  I just submitted a pull request to Orchard for&lt;br&gt;documentation around the dynamic forms module. The documentation could use a&lt;br&gt;little more work, but I at least wanted to get some of the basics in place. I&lt;br&gt;just followed along with the previous custom forms module and the great &lt;a href=&quot;http://www.ideliverable.com/blog/customizing-user-registration-and-login-with-dynamic-forms-and-workflows&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;post&lt;/a&gt;&lt;br&gt;on IDeliverable’s blog, the post is a little dated, but still a great refernce.&lt;/p&gt;
&lt;p&gt;I hope to be posting more about Orchard shortly. My team already has a couple&lt;br&gt;of pull requests and we are looking to submit more than just documentation. I&lt;br&gt;also have a few ideas for modules that I would like to create.  With this long&lt;br&gt;weekend, I may be able to make at least one module happen.&lt;/p&gt;
&lt;p&gt;Thanks for reading.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Lately my team and I have been working with &lt;a href=&quot;http://www.orchardproject.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Orchard&lt;/a&gt; CMS. We p
    
    </summary>
    
    
      <category term="Open Source" scheme="http://www.phillipsj.net/tags/Open-Source/"/>
    
      <category term="Orchard" scheme="http://www.phillipsj.net/tags/Orchard/"/>
    
  </entry>
  
  <entry>
    <title>Bottom or Top Line Development</title>
    <link href="http://www.phillipsj.net/2015/07/28/Bottom-or-Top-Line-Development/"/>
    <id>http://www.phillipsj.net/2015/07/28/Bottom-or-Top-Line-Development/</id>
    <published>2015-07-29T00:00:00.000Z</published>
    <updated>2016-05-31T00:15:17.248Z</updated>
    
    <content type="html">&lt;p&gt;On my journey into management, I have picked up a copy of &lt;a href=&quot;https://pragprog.com/book/rdbcd/behind-closed-doors&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Behind Closed Doors&lt;/a&gt;&lt;br&gt;from the &lt;a href=&quot;https://pragprog.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pragmatic Bookshelf&lt;/a&gt;. I love their books and so far this one is&lt;br&gt;shaping up to be a good one. Now to the point of this post, there is an aside&lt;br&gt;in the book that discusses being a group that works directly on a product that&lt;br&gt;generates revenue or being a group that supports the company to sell the companies&lt;br&gt;product. The difference being, one group generates top line, while the other group&lt;br&gt;contributes to the bottom line. This is just one of those things that I didn’t&lt;br&gt;see coming and it hurt. All I can think is WOW! I naturally think in the bottom&lt;br&gt;line and since my first job was working in government, I am not suprised.  All&lt;br&gt;of my past development has been on products that support the business in their&lt;br&gt;job, I have never actually worked on a product that was the business. Such a&lt;br&gt;small aside, but it is so true. The focus of the aside is primarily focused on&lt;br&gt;defining the mission on the group, but I think it is way deeper than that. I&lt;br&gt;intrinsically find enjoyment on building products that enable others to perform&lt;br&gt;their best. Maybe it is the maximizer in me, but I it just clicks. I find the idea&lt;br&gt;of a software product intriguing, however I have made career choices that have not&lt;br&gt;lead down that road. When I orignally moved into this position that I am in, I&lt;br&gt;thought here is my chance to develop a product, but what I realize is that I am&lt;br&gt;developing a product that helps the business deliver their products. Just WOW!&lt;br&gt;I wanted to share this with everyone, until next time.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;On my journey into management, I have picked up a copy of &lt;a href=&quot;https://pragprog.com/book/rdbcd/behind-closed-doors&quot; target=&quot;_blank&quot; r
    
    </summary>
    
    
      <category term="Agile" scheme="http://www.phillipsj.net/tags/Agile/"/>
    
      <category term="Shipping" scheme="http://www.phillipsj.net/tags/Shipping/"/>
    
  </entry>
  
</feed>
